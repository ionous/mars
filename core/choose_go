an example of how to use if-then shortcuts;
the actual implementation may need shortcuts to implement eval testing/ unpacking so that we dont have to add each and every shortcut to a native package extension.

....

 s.The("containers",
 		When("printing name text").
 			Always(g.Say(
 	If(g.The("object").Is("closed")).
 		UseText(
 			If(g.The("object").Is("hinged")).UseText(T("( closed )"))).
 		ElseText(
 			If(g.The("object").ObjectList("contents").Empty()).
 				UseText(
 					If(Any(g.The("object").Is("transparent")).Or(g.The("object").Is("open"))).
 						UseText(T("( empty )")))),
 			g.StopHere(),
 			))),
........

 type ifPhrase struct {
 	test rt.BoolEval
 }

 type ifTextPhrase struct {
 	test rt.BoolEval
 	text rt.TextEval
 }

  If boool
 func If(b rt.BoolEval) ifPhrase {
 	return ifPhrase{b}
 }

 func (x ifPhrase) UseText(t rt.TextEval) ifTextPhrase {
 	return ifTextPhrase{x.test, t}
 }

 func (x ifPhrase) ElseText(t rt.TextEval) ChooseText {
 	return ChooseText{
 		If:    x.test,
 		False: t,
 	}
 }

 func (x ifTextPhrase) ElseText(t rt.TextEval) ChooseText {
 	return ChooseText{
 		If:    x.test,
 		True:  x.text,
 		False: t,
 	}
 }
